#!/usr/bin/env node

const scriptHelpDocument = `
NAME
  generateSupportedLangs.js â€” Script to generate the 'src/i18n/messages/currentlySupportedLangs.jsx' file which contains static import for react-intl data.

SYNOPSIS
  generateSupportedLangs.js [comma separated list of languages]
  


DESCRIPTION

  Run this script after 'atlas' has pulled the files in the following structure:  
    
    $ generateSupportedLangs.js ar,es_419,fr_CA

  This script is intended as a temporary solution until the studio-frontend can dynamically load the languages from the react-intl data like the other micro-frontends.
`;

const fs = require('fs');
const path = require('path');

const loggingPrefix = path.basename(`${__filename}`); // the name of this JS file

// Header note for generated src/i18n/index.js file
const filesCodeGeneratorNoticeHeader = '// This file is generated by the "i18n/scripts/generateSupportedLangs.js" script.';

/**
 * Create main `src/i18n/index.js` messages import file.
 *
 *
 * @param languages - List of directories with a boolean flag whether its "index.js" file is written
 *                               The format is "[\{ directory: "frontend-component-example", isWritten: false \}, ...]"
 * @param log - Mockable process.stdout.write
 * @param writeFileSync - Mockable fs.writeFileSync
 * @param i18nDir` - Path to `src/i18n` directory
 */
function generateSupportedLangsFile({
  languages,
  log,
  writeFileSync,
  i18nDir,
}) {
  const importLines = [];
  const exportLines = [];

  languages.forEach(language => {
    const [languageFamilyCode] = language.split('_'); // Get `es` from `es-419`

    const importVariableName = `${languageFamilyCode.toLowerCase()}Data`;
    const dashLanguageCode = language.toLowerCase().replace(/_/g, '-');
    importLines.push(`import ${importVariableName} from 'react-intl/locale-data/${languageFamilyCode}';`);

    // Note: These imports are not directly consumed by the studio-frontend React app. They're imported to ensure that
    //       the messages/*.json files exists and they can be loaded via the load_sfe_i18n_messages() function in
    //       the `edx-platform`.
    //
    //       This pattern should probably be refactored to pull the translations directly within the `edx-platform`.
    const jsonFilename = `${language}.json`;
    if (fs.existsSync(`${i18nDir}/messages/${jsonFilename}`)) {
      importLines.push(`import './${jsonFilename}';`);
      log(`${loggingPrefix}: Notice: Not importing 'messages/${jsonFilename}' because the file wasn't found.\n`);
    }

    exportLines.push(`  '${dashLanguageCode}': ${importVariableName},`);
  });

  // See the help message above for sample output.
  const indexFileContent = [
    filesCodeGeneratorNoticeHeader,
    importLines.join('\n'),
    '\nexport default {',
    exportLines.join('\n'),
    '};\n',
  ].join('\n');

  writeFileSync(`${i18nDir}/messages/currentlySupportedLangs.jsx`, indexFileContent);
}

/*
 * Main function of the file.
 */
function main({
  parameters,
  log,
  writeFileSync,
  pwd,
}) {
  const i18nDir = `${pwd}/src/i18n`; // The Micro-frontend i18n root directory
  const [languagesString] = parameters;

  if (parameters.includes('--help') || parameters.includes('-h')) {
    log(scriptHelpDocument);
  } else if (!parameters.length) {
    log(scriptHelpDocument);
    log(`${loggingPrefix}: Error: A comma separated list of languages is required.\n`);
  } else {
    generateSupportedLangsFile({
      languages: languagesString.split(','),
      log,
      writeFileSync,
      i18nDir,
    });
    log(`${loggingPrefix}: Finished generating the 'currentlySupportedLangs.jsx' file.`);
  }
}

if (require.main === module) {
  // Run the main() function if called from the command line.
  main({
    parameters: process.argv.slice(2),
    log: text => process.stdout.write(text),
    writeFileSync: fs.writeFileSync,
    pwd: process.env.PWD,
  });
}

module.exports.main = main; // Allow tests to use the main function.
